# OASIS_START
# DO NOT EDIT (digest: c29a6ee2f8ee492734ccee990494e0b3)
# Ignore VCS directories, you can use the same kind of rule outside 
# OASIS_START/STOP if you want to exclude directories that contains 
# useless stuff for the build process
<**/.svn>: -traverse
<**/.svn>: not_hygienic
".bzr": -traverse
".bzr": not_hygienic
".hg": -traverse
".hg": not_hygienic
".git": -traverse
".git": not_hygienic
"_darcs": -traverse
"_darcs": not_hygienic
# Library ocaml_plugin
"lib/ocaml_plugin.cmxs": use_ocaml_plugin
"lib/ml_bundle.cmx": for-pack(Ocaml_plugin)
"lib/ocaml_compiler.cmx": for-pack(Ocaml_plugin)
"lib/ocaml_dynloader.cmx": for-pack(Ocaml_plugin)
"lib/params.cmx": for-pack(Ocaml_plugin)
"lib/plugin_cache.cmx": for-pack(Ocaml_plugin)
"lib/plugin_uuid.cmx": for-pack(Ocaml_plugin)
"lib/plugin_table.cmx": for-pack(Ocaml_plugin)
"lib/shell.cmx": for-pack(Ocaml_plugin)
"lib/std.cmx": for-pack(Ocaml_plugin)
"lib/tar.cmx": for-pack(Ocaml_plugin)
<lib/*.ml{,i}>: pkg_sexplib.syntax
<lib/*.ml{,i}>: pkg_threads
<lib/*.ml{,i}>: pkg_sexplib
<lib/*.ml{,i}>: pkg_dynlink
<lib/*.ml{,i}>: pkg_async
<lib/*.ml{,i}>: pkg_comparelib
<lib/*.ml{,i}>: pkg_comparelib.syntax
<lib/*.ml{,i}>: pkg_bin_prot
<lib/*.ml{,i}>: pkg_bin_prot.syntax
<lib/*.ml{,i}>: pkg_fieldslib
<lib/*.ml{,i}>: pkg_fieldslib.syntax
<lib/*.ml{,i}>: pkg_herelib
<lib/*.ml{,i}>: pkg_herelib.syntax
# Library ocaml_plugin_fake_archive
"bin/ocaml_plugin_fake_archive.cmxs": use_ocaml_plugin_fake_archive
<bin/ocaml_plugin_fake_archive.{cma,cmxa}>: use_libocaml_plugin_fake_archive_stubs
# Executable ocaml-embed-compiler
"bin/ocaml_embed_compiler.native": use_ocaml_plugin
"bin/ocaml_embed_compiler.native": use_ocaml_plugin_fake_archive
"bin/ocaml_embed_compiler.native": pkg_sexplib.syntax
"bin/ocaml_embed_compiler.native": pkg_threads
"bin/ocaml_embed_compiler.native": pkg_sexplib
"bin/ocaml_embed_compiler.native": pkg_dynlink
"bin/ocaml_embed_compiler.native": pkg_async
"bin/ocaml_embed_compiler.native": pkg_comparelib
"bin/ocaml_embed_compiler.native": pkg_comparelib.syntax
"bin/ocaml_embed_compiler.native": pkg_bin_prot
"bin/ocaml_embed_compiler.native": pkg_bin_prot.syntax
"bin/ocaml_embed_compiler.native": pkg_fieldslib
"bin/ocaml_embed_compiler.native": pkg_fieldslib.syntax
"bin/ocaml_embed_compiler.native": pkg_herelib
"bin/ocaml_embed_compiler.native": pkg_herelib.syntax
<bin/*.ml{,i}>: use_ocaml_plugin_fake_archive
# Library ocaml_plugin_sample_archive
"bin/ocaml_plugin_sample_archive.cmxs": use_ocaml_plugin_sample_archive
<bin/ocaml_plugin_sample_archive.{cma,cmxa}>: use_libocaml_plugin_sample_archive_stubs
<bin/*.ml{,i}>: use_ocaml_plugin
<bin/*.ml{,i}>: pkg_sexplib.syntax
<bin/*.ml{,i}>: pkg_threads
<bin/*.ml{,i}>: pkg_type_conv
<bin/*.ml{,i}>: pkg_sexplib
<bin/*.ml{,i}>: pkg_dynlink
<bin/*.ml{,i}>: pkg_async
<bin/*.ml{,i}>: pkg_comparelib
<bin/*.ml{,i}>: pkg_comparelib.syntax
<bin/*.ml{,i}>: pkg_bin_prot
<bin/*.ml{,i}>: pkg_bin_prot.syntax
<bin/*.ml{,i}>: pkg_fieldslib
<bin/*.ml{,i}>: pkg_fieldslib.syntax
<bin/*.ml{,i}>: pkg_herelib
<bin/*.ml{,i}>: pkg_herelib.syntax
"bin/ocaml_sample_archive.c": use_ocaml_plugin
"bin/ocaml_sample_archive.c": pkg_sexplib.syntax
"bin/ocaml_sample_archive.c": pkg_threads
"bin/ocaml_sample_archive.c": pkg_type_conv
"bin/ocaml_sample_archive.c": pkg_sexplib
"bin/ocaml_sample_archive.c": pkg_dynlink
"bin/ocaml_sample_archive.c": pkg_async
"bin/ocaml_sample_archive.c": pkg_comparelib
"bin/ocaml_sample_archive.c": pkg_comparelib.syntax
"bin/ocaml_sample_archive.c": pkg_bin_prot
"bin/ocaml_sample_archive.c": pkg_bin_prot.syntax
"bin/ocaml_sample_archive.c": pkg_fieldslib
"bin/ocaml_sample_archive.c": pkg_fieldslib.syntax
"bin/ocaml_sample_archive.c": pkg_herelib
"bin/ocaml_sample_archive.c": pkg_herelib.syntax
# Executable hello-world
"hello_world/run.native": use_ocaml_plugin_sample_archive
"hello_world/run.native": use_ocaml_plugin
"hello_world/run.native": pkg_sexplib.syntax
"hello_world/run.native": pkg_threads
"hello_world/run.native": pkg_type_conv
"hello_world/run.native": pkg_sexplib
"hello_world/run.native": pkg_dynlink
"hello_world/run.native": pkg_async
"hello_world/run.native": pkg_comparelib
"hello_world/run.native": pkg_comparelib.syntax
"hello_world/run.native": pkg_bin_prot
"hello_world/run.native": pkg_bin_prot.syntax
"hello_world/run.native": pkg_fieldslib
"hello_world/run.native": pkg_fieldslib.syntax
"hello_world/run.native": pkg_herelib
"hello_world/run.native": pkg_herelib.syntax
<hello_world/*.ml{,i}>: use_ocaml_plugin_sample_archive
<hello_world/*.ml{,i}>: use_ocaml_plugin
<hello_world/*.ml{,i}>: pkg_sexplib.syntax
<hello_world/*.ml{,i}>: pkg_threads
<hello_world/*.ml{,i}>: pkg_type_conv
<hello_world/*.ml{,i}>: pkg_sexplib
<hello_world/*.ml{,i}>: pkg_dynlink
<hello_world/*.ml{,i}>: pkg_async
<hello_world/*.ml{,i}>: pkg_comparelib
<hello_world/*.ml{,i}>: pkg_comparelib.syntax
<hello_world/*.ml{,i}>: pkg_bin_prot
<hello_world/*.ml{,i}>: pkg_bin_prot.syntax
<hello_world/*.ml{,i}>: pkg_fieldslib
<hello_world/*.ml{,i}>: pkg_fieldslib.syntax
<hello_world/*.ml{,i}>: pkg_herelib
<hello_world/*.ml{,i}>: pkg_herelib.syntax
# Executable sample
"sample/run.native": use_ocaml_plugin_sample_archive
"sample/run.native": use_ocaml_plugin
"sample/run.native": pkg_sexplib.syntax
"sample/run.native": pkg_threads
"sample/run.native": pkg_type_conv
"sample/run.native": pkg_sexplib
"sample/run.native": pkg_dynlink
"sample/run.native": pkg_async
"sample/run.native": pkg_comparelib
"sample/run.native": pkg_comparelib.syntax
"sample/run.native": pkg_bin_prot
"sample/run.native": pkg_bin_prot.syntax
"sample/run.native": pkg_fieldslib
"sample/run.native": pkg_fieldslib.syntax
"sample/run.native": pkg_herelib
"sample/run.native": pkg_herelib.syntax
<sample/*.ml{,i}>: use_ocaml_plugin_sample_archive
<sample/*.ml{,i}>: use_ocaml_plugin
<sample/*.ml{,i}>: pkg_sexplib.syntax
<sample/*.ml{,i}>: pkg_threads
<sample/*.ml{,i}>: pkg_type_conv
<sample/*.ml{,i}>: pkg_sexplib
<sample/*.ml{,i}>: pkg_dynlink
<sample/*.ml{,i}>: pkg_async
<sample/*.ml{,i}>: pkg_comparelib
<sample/*.ml{,i}>: pkg_comparelib.syntax
<sample/*.ml{,i}>: pkg_bin_prot
<sample/*.ml{,i}>: pkg_bin_prot.syntax
<sample/*.ml{,i}>: pkg_fieldslib
<sample/*.ml{,i}>: pkg_fieldslib.syntax
<sample/*.ml{,i}>: pkg_herelib
<sample/*.ml{,i}>: pkg_herelib.syntax
# Executable test
"test/plugin_loader.native": use_ocaml_plugin_sample_archive
"test/plugin_loader.native": use_ocaml_plugin
"test/plugin_loader.native": pkg_sexplib.syntax
"test/plugin_loader.native": pkg_threads
"test/plugin_loader.native": pkg_type_conv
"test/plugin_loader.native": pkg_sexplib
"test/plugin_loader.native": pkg_dynlink
"test/plugin_loader.native": pkg_async
"test/plugin_loader.native": pkg_comparelib
"test/plugin_loader.native": pkg_comparelib.syntax
"test/plugin_loader.native": pkg_bin_prot
"test/plugin_loader.native": pkg_bin_prot.syntax
"test/plugin_loader.native": pkg_fieldslib
"test/plugin_loader.native": pkg_fieldslib.syntax
"test/plugin_loader.native": pkg_herelib
"test/plugin_loader.native": pkg_herelib.syntax
<test/*.ml{,i}>: use_ocaml_plugin_sample_archive
<test/*.ml{,i}>: use_ocaml_plugin
<test/*.ml{,i}>: pkg_sexplib.syntax
<test/*.ml{,i}>: pkg_threads
<test/*.ml{,i}>: pkg_type_conv
<test/*.ml{,i}>: pkg_sexplib
<test/*.ml{,i}>: pkg_dynlink
<test/*.ml{,i}>: pkg_async
<test/*.ml{,i}>: pkg_comparelib
<test/*.ml{,i}>: pkg_comparelib.syntax
<test/*.ml{,i}>: pkg_bin_prot
<test/*.ml{,i}>: pkg_bin_prot.syntax
<test/*.ml{,i}>: pkg_fieldslib
<test/*.ml{,i}>: pkg_fieldslib.syntax
<test/*.ml{,i}>: pkg_herelib
<test/*.ml{,i}>: pkg_herelib.syntax
# OASIS_STOP
<{bin,lib,test}/*.ml{,i}>: syntax_camlp4o
