# OASIS_START
# DO NOT EDIT (digest: e5931be22ff003df4a3d7dcd05fb7999)
# Ignore VCS directories, you can use the same kind of rule outside
# OASIS_START/STOP if you want to exclude directories that contains
# useless stuff for the build process
true: annot, bin_annot
<**/.svn>: -traverse
<**/.svn>: not_hygienic
".bzr": -traverse
".bzr": not_hygienic
".hg": -traverse
".hg": not_hygienic
".git": -traverse
".git": not_hygienic
"_darcs": -traverse
"_darcs": not_hygienic
# Library ocaml_plugin
"src/ocaml_plugin.cmxs": use_ocaml_plugin
"src/import.cmx": for-pack(Ocaml_plugin)
"src/ml_bundle.cmx": for-pack(Ocaml_plugin)
"src/ocamldep.cmx": for-pack(Ocaml_plugin)
"src/ocaml_compiler.cmx": for-pack(Ocaml_plugin)
"src/ocaml_dynloader.cmx": for-pack(Ocaml_plugin)
"src/params.cmx": for-pack(Ocaml_plugin)
"src/plugin_cache.cmx": for-pack(Ocaml_plugin)
"src/plugin_uuid.cmx": for-pack(Ocaml_plugin)
"src/shell.cmx": for-pack(Ocaml_plugin)
"src/std.cmx": for-pack(Ocaml_plugin)
"src/tar.cmx": for-pack(Ocaml_plugin)
<src/*.ml{,i,y}>: package(async)
<src/*.ml{,i,y}>: package(bin_prot)
<src/*.ml{,i,y}>: package(bin_prot.syntax)
<src/*.ml{,i,y}>: package(comparelib)
<src/*.ml{,i,y}>: package(comparelib.syntax)
<src/*.ml{,i,y}>: package(dynlink)
<src/*.ml{,i,y}>: package(fieldslib)
<src/*.ml{,i,y}>: package(fieldslib.syntax)
<src/*.ml{,i,y}>: package(herelib)
<src/*.ml{,i,y}>: package(herelib.syntax)
<src/*.ml{,i,y}>: package(pa_ounit.syntax)
<src/*.ml{,i,y}>: package(pa_test.syntax)
<src/*.ml{,i,y}>: package(sexplib)
<src/*.ml{,i,y}>: package(sexplib.syntax)
<src/*.ml{,i,y}>: package(threads)
# Library ocaml_plugin_fake_archive
"bin/ocaml_plugin_fake_archive.cmxs": use_ocaml_plugin_fake_archive
<bin/ocaml_plugin_fake_archive.{cma,cmxa}>: use_libocaml_plugin_fake_archive_stubs
# Executable ocaml-embed-compiler
"bin/ocaml_embed_compiler.native": package(async)
"bin/ocaml_embed_compiler.native": package(bin_prot)
"bin/ocaml_embed_compiler.native": package(bin_prot.syntax)
"bin/ocaml_embed_compiler.native": package(comparelib)
"bin/ocaml_embed_compiler.native": package(comparelib.syntax)
"bin/ocaml_embed_compiler.native": package(dynlink)
"bin/ocaml_embed_compiler.native": package(fieldslib)
"bin/ocaml_embed_compiler.native": package(fieldslib.syntax)
"bin/ocaml_embed_compiler.native": package(herelib)
"bin/ocaml_embed_compiler.native": package(herelib.syntax)
"bin/ocaml_embed_compiler.native": package(pa_ounit.syntax)
"bin/ocaml_embed_compiler.native": package(pa_test.syntax)
"bin/ocaml_embed_compiler.native": package(sexplib)
"bin/ocaml_embed_compiler.native": package(sexplib.syntax)
"bin/ocaml_embed_compiler.native": package(threads)
"bin/ocaml_embed_compiler.native": use_ocaml_plugin
"bin/ocaml_embed_compiler.native": use_ocaml_plugin_fake_archive
<bin/*.ml{,i,y}>: use_ocaml_plugin_fake_archive
# Library ocaml_plugin_sample_archive
"bin/ocaml_plugin_sample_archive.cmxs": use_ocaml_plugin_sample_archive
<bin/ocaml_plugin_sample_archive.{cma,cmxa}>: use_libocaml_plugin_sample_archive_stubs
<bin/*.ml{,i,y}>: package(async)
<bin/*.ml{,i,y}>: package(bin_prot)
<bin/*.ml{,i,y}>: package(bin_prot.syntax)
<bin/*.ml{,i,y}>: package(comparelib)
<bin/*.ml{,i,y}>: package(comparelib.syntax)
<bin/*.ml{,i,y}>: package(dynlink)
<bin/*.ml{,i,y}>: package(fieldslib)
<bin/*.ml{,i,y}>: package(fieldslib.syntax)
<bin/*.ml{,i,y}>: package(herelib)
<bin/*.ml{,i,y}>: package(herelib.syntax)
<bin/*.ml{,i,y}>: package(pa_ounit.syntax)
<bin/*.ml{,i,y}>: package(pa_test.syntax)
<bin/*.ml{,i,y}>: package(sexplib)
<bin/*.ml{,i,y}>: package(sexplib.syntax)
<bin/*.ml{,i,y}>: package(threads)
<bin/*.ml{,i,y}>: package(type_conv)
<bin/*.ml{,i,y}>: use_ocaml_plugin
"bin/ocaml_sample_archive.c": package(async)
"bin/ocaml_sample_archive.c": package(bin_prot)
"bin/ocaml_sample_archive.c": package(bin_prot.syntax)
"bin/ocaml_sample_archive.c": package(comparelib)
"bin/ocaml_sample_archive.c": package(comparelib.syntax)
"bin/ocaml_sample_archive.c": package(dynlink)
"bin/ocaml_sample_archive.c": package(fieldslib)
"bin/ocaml_sample_archive.c": package(fieldslib.syntax)
"bin/ocaml_sample_archive.c": package(herelib)
"bin/ocaml_sample_archive.c": package(herelib.syntax)
"bin/ocaml_sample_archive.c": package(pa_ounit.syntax)
"bin/ocaml_sample_archive.c": package(pa_test.syntax)
"bin/ocaml_sample_archive.c": package(sexplib)
"bin/ocaml_sample_archive.c": package(sexplib.syntax)
"bin/ocaml_sample_archive.c": package(threads)
"bin/ocaml_sample_archive.c": package(type_conv)
"bin/ocaml_sample_archive.c": use_ocaml_plugin
# Executable hello-world
"hello_world/run.native": package(async)
"hello_world/run.native": package(bin_prot)
"hello_world/run.native": package(bin_prot.syntax)
"hello_world/run.native": package(comparelib)
"hello_world/run.native": package(comparelib.syntax)
"hello_world/run.native": package(dynlink)
"hello_world/run.native": package(fieldslib)
"hello_world/run.native": package(fieldslib.syntax)
"hello_world/run.native": package(herelib)
"hello_world/run.native": package(herelib.syntax)
"hello_world/run.native": package(pa_ounit.syntax)
"hello_world/run.native": package(pa_test.syntax)
"hello_world/run.native": package(sexplib)
"hello_world/run.native": package(sexplib.syntax)
"hello_world/run.native": package(threads)
"hello_world/run.native": package(type_conv)
"hello_world/run.native": use_ocaml_plugin
"hello_world/run.native": use_ocaml_plugin_sample_archive
<hello_world/*.ml{,i,y}>: package(async)
<hello_world/*.ml{,i,y}>: package(bin_prot)
<hello_world/*.ml{,i,y}>: package(bin_prot.syntax)
<hello_world/*.ml{,i,y}>: package(comparelib)
<hello_world/*.ml{,i,y}>: package(comparelib.syntax)
<hello_world/*.ml{,i,y}>: package(dynlink)
<hello_world/*.ml{,i,y}>: package(fieldslib)
<hello_world/*.ml{,i,y}>: package(fieldslib.syntax)
<hello_world/*.ml{,i,y}>: package(herelib)
<hello_world/*.ml{,i,y}>: package(herelib.syntax)
<hello_world/*.ml{,i,y}>: package(pa_ounit.syntax)
<hello_world/*.ml{,i,y}>: package(pa_test.syntax)
<hello_world/*.ml{,i,y}>: package(sexplib)
<hello_world/*.ml{,i,y}>: package(sexplib.syntax)
<hello_world/*.ml{,i,y}>: package(threads)
<hello_world/*.ml{,i,y}>: package(type_conv)
<hello_world/*.ml{,i,y}>: use_ocaml_plugin
<hello_world/*.ml{,i,y}>: use_ocaml_plugin_sample_archive
# Executable sample
"sample/run.native": package(async)
"sample/run.native": package(bin_prot)
"sample/run.native": package(bin_prot.syntax)
"sample/run.native": package(comparelib)
"sample/run.native": package(comparelib.syntax)
"sample/run.native": package(dynlink)
"sample/run.native": package(fieldslib)
"sample/run.native": package(fieldslib.syntax)
"sample/run.native": package(herelib)
"sample/run.native": package(herelib.syntax)
"sample/run.native": package(pa_ounit.syntax)
"sample/run.native": package(pa_test.syntax)
"sample/run.native": package(sexplib)
"sample/run.native": package(sexplib.syntax)
"sample/run.native": package(threads)
"sample/run.native": package(type_conv)
"sample/run.native": use_ocaml_plugin
"sample/run.native": use_ocaml_plugin_sample_archive
<sample/*.ml{,i,y}>: package(async)
<sample/*.ml{,i,y}>: package(bin_prot)
<sample/*.ml{,i,y}>: package(bin_prot.syntax)
<sample/*.ml{,i,y}>: package(comparelib)
<sample/*.ml{,i,y}>: package(comparelib.syntax)
<sample/*.ml{,i,y}>: package(dynlink)
<sample/*.ml{,i,y}>: package(fieldslib)
<sample/*.ml{,i,y}>: package(fieldslib.syntax)
<sample/*.ml{,i,y}>: package(herelib)
<sample/*.ml{,i,y}>: package(herelib.syntax)
<sample/*.ml{,i,y}>: package(pa_ounit.syntax)
<sample/*.ml{,i,y}>: package(pa_test.syntax)
<sample/*.ml{,i,y}>: package(sexplib)
<sample/*.ml{,i,y}>: package(sexplib.syntax)
<sample/*.ml{,i,y}>: package(threads)
<sample/*.ml{,i,y}>: package(type_conv)
<sample/*.ml{,i,y}>: use_ocaml_plugin
<sample/*.ml{,i,y}>: use_ocaml_plugin_sample_archive
# Executable test
"test/plugin_loader.native": package(async)
"test/plugin_loader.native": package(bin_prot)
"test/plugin_loader.native": package(bin_prot.syntax)
"test/plugin_loader.native": package(comparelib)
"test/plugin_loader.native": package(comparelib.syntax)
"test/plugin_loader.native": package(dynlink)
"test/plugin_loader.native": package(fieldslib)
"test/plugin_loader.native": package(fieldslib.syntax)
"test/plugin_loader.native": package(herelib)
"test/plugin_loader.native": package(herelib.syntax)
"test/plugin_loader.native": package(pa_ounit.syntax)
"test/plugin_loader.native": package(pa_test.syntax)
"test/plugin_loader.native": package(sexplib)
"test/plugin_loader.native": package(sexplib.syntax)
"test/plugin_loader.native": package(threads)
"test/plugin_loader.native": package(type_conv)
"test/plugin_loader.native": use_ocaml_plugin
"test/plugin_loader.native": use_ocaml_plugin_sample_archive
<test/*.ml{,i,y}>: package(async)
<test/*.ml{,i,y}>: package(bin_prot)
<test/*.ml{,i,y}>: package(bin_prot.syntax)
<test/*.ml{,i,y}>: package(comparelib)
<test/*.ml{,i,y}>: package(comparelib.syntax)
<test/*.ml{,i,y}>: package(dynlink)
<test/*.ml{,i,y}>: package(fieldslib)
<test/*.ml{,i,y}>: package(fieldslib.syntax)
<test/*.ml{,i,y}>: package(herelib)
<test/*.ml{,i,y}>: package(herelib.syntax)
<test/*.ml{,i,y}>: package(pa_ounit.syntax)
<test/*.ml{,i,y}>: package(pa_test.syntax)
<test/*.ml{,i,y}>: package(sexplib)
<test/*.ml{,i,y}>: package(sexplib.syntax)
<test/*.ml{,i,y}>: package(threads)
<test/*.ml{,i,y}>: package(type_conv)
<test/*.ml{,i,y}>: use_ocaml_plugin
<test/*.ml{,i,y}>: use_ocaml_plugin_sample_archive
# OASIS_STOP
<{bin,src,test}/*.ml{,i}>: syntax_camlp4o
