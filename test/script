#!/bin/bash

# redirecting stderr to stdout
exec 2>&1

# not awesome is the same test is running in parallel in an other repo
# could go inside and use the debug info maybe?
tmpdirs_before="$(echo tmp_dir/ocaml_plugin*)"

function cleanup {
    rm -rf cache tmp_dir test{,1,2,3}.ml{,i} invalid-name.ml Test.ml{,i}
}
trap 'cleanup' EXIT INT QUIT
cleanup

echo 'Loading non existing mli'
output="$(./plugin_loader.exe ./test.mli 2>&1)"
if grep -q 'No such file or directory' <<< "$output"; then
    echo 'failed the expected way'
else
    echo "broken test: $output"
fi
echo

echo 'Loading non existing ml'
output="$(./plugin_loader.exe ./test.ml 2>&1)"
if grep -q 'No such file or directory' <<< "$output"; then
    echo 'failed the expected way'
else
    echo "broken test: $output"
fi
echo

echo > test.mli
echo 'Loading mli without ml'
output="$(./plugin_loader.exe ./test.mli 2>&1)"
rm -f test.mli
if grep -q 'No such file or directory' <<< "$output"; then
    echo 'loaded fine'
else
    echo "broken test: $output"
fi
echo

echo 'Loading ml without mli'
echo 'print_string "loaded\n"' > ./test.ml
output="$(./plugin_loader.exe ./test.ml 2>&1)"
if [ "$output" = $'loaded' ]; then
    echo 'loaded fine'
else
    echo "broken test: $output"
fi
echo

echo 'Loading ml with mli by mentioning ml'
echo > ./test.mli
output="$(./plugin_loader.exe ./test.ml 2>&1)"
if [ "$output" = $'loaded' ]; then
    echo 'loaded fine'
else
    echo "broken test: $output"
fi
echo

echo 'Loading ml with mli by mentioning ml without extension'
echo > ./test.mli
output="$(./plugin_loader.exe ./test 2>&1)"
if [ "$output" = $'loaded' ]; then
    echo 'loaded fine'
else
    echo "broken test: $output"
fi
echo

echo 'Loading ml with mli by mentioning mli'
echo > ./test.mli
output="$(./plugin_loader.exe ./test.mli 2>&1)"
if [ "$output" = $'loaded' ]; then
    echo 'loaded fine'
else
    echo "broken test: $output"
fi
echo

echo 'Loading ml with mli by mentioning wrong mli'
echo 'val a : int' > test.mli
output="$(./plugin_loader.exe ./test.mli 2>&1)"
if grep -q 'The field `a'\'' is required' <<< "$output"; then
    echo 'failed fine'
else
    echo "broken test: $output"
fi
echo

rm test.mli
echo 'loading the same ml file several times'
output="$(./plugin_loader.exe 'test.ml | test.ml | test.ml | test2.ml' 2>&1)"
if [ "$(grep '^loaded$' <<< "$output")" = $'loaded\nloaded\nloaded' ]; then
    echo 'really loaded several times'
else
    echo "broken test: $output"
fi
echo

echo 'loading the same ml file several times with a cache'
output="$(./plugin_loader.exe --cache 'test.ml | test.ml' 2>&1; ./plugin_loader.exe --cache 'test.ml | test.ml' 2>&1)"
if [ "$(grep '^loaded$' <<< "$output")" = $'loaded\nloaded\nloaded\nloaded' ]; then
    if [ "$(find cache -type f -name '*.cmxs' | wc -l)" = 1 ]; then
        echo 'really loaded several times, and compiled once'
    else
        echo 'really loaded several times, but compiled several times too'
    fi
else
    echo "broken test: $output"
fi
echo

echo 'Checking that it really is using the cache'
cmxs_before="$(find cache -type f -name '*.cmxs')"
echo 'print_string "somethingelse"' > test2.ml
output1="$(./plugin_loader.exe --cache 'test2.ml' 2>&1)"
cmxs_after="$(find cache -type f -name '*.cmxs')"
new_cmxs="$(comm -23 <(sort -u <<< "$cmxs_after") <(sort -u <<< "$cmxs_before"))"
output2="$(./plugin_loader.exe --cache 'test.ml' 2>&1)"
for i in $cmxs_before; do cp $new_cmxs $i; done
output3="$(./plugin_loader.exe --cache 'test.ml' 2>&1)"
if [ "$output1""$output2""$output3" = "somethingelse""loaded""somethingelse" ]; then
    echo "perfect"
else
    echo "broken test:"
    echo "$output1"
    echo "$output2"
    echo "$output3"
fi
echo

echo 'Loading ml that blows up at toplevel'
echo 'let () = failwith "blowup"' > test.ml
output="$(./plugin_loader.exe ./test.ml 2>&1)"
if grep -q 'Failure blowup' <<< "$output"; then
    echo 'failed fine'
else
    echo "broken test: $output"
fi
echo

echo 'loading several ml files'
echo 'let x = Test2.x ^ "-middle"' > test1.ml
echo 'let x = "first"' > test2.ml
echo 'let x = Test1.x ^ "-last";; print_endline x' > test3.ml
output="$(./plugin_loader.exe test2.ml test1.ml test3.ml 2>&1)"
if [ "$output" = 'first-middle-last' ]; then
    echo 'loaded in the right order and with the right scope'
else
    echo "broken test: $output"
fi
echo

echo 'loading file with a wrong name'
echo > invalid-name.ml
output="$(./plugin_loader.exe invalid-name.ml 2>&1)"
if grep -q 'not a valid ocaml' <<< "$output"; then
    echo "wrong module names are rejected"
else
    echo "broken test: $output"
fi
echo

echo 'loading names that collide'
echo > Test.ml
output="$(./plugin_loader.exe test.ml Test.ml 2>&1)"
if grep -q 'Several implementations' <<< "$output"; then
    echo "detected"
else
    echo "broken test: $output"
fi
echo

echo 'loading mli that collide'
echo > Test.mli
output="$(./plugin_loader.exe test.mli Test.mli 2>&1)"
if grep -q 'Several interface' <<< "$output"; then
    echo "detected"
else
    echo "broken test: $output"
fi
echo

echo 'loading ml and mli with different basenames but same module name'
echo 'let x = 2' > test.ml
echo 'val x : string' > Test.mli
output="$(./plugin_loader.exe test.ml Test.mli 2>&1)"
if grep -q 'Signature mismatch' <<< "$output"; then
    echo type error as expected
else
    echo "broken test: $output"
fi
echo

echo 'loading ml and mli from different dirs'
echo 'let x = 2' > test.ml
echo 'val x : int' > test.mli
echo 'val x : string' > tmp_dir/Test.mli
output="$(./plugin_loader.exe test.ml tmp_dir/Test.mli 2>&1)"
if grep -q 'Signature mismatch' <<< "$output"; then
    echo type error as expected
else
    echo "broken test: $output"
fi
echo

echo 'checking unused variables warnings 1'
rm -f test1.mli test2.mli
echo 'let x = "Test1.x"' >  test1.ml
echo 'let y = "Test1.y"' >> test1.ml
echo 'let x = Test1.x  ' >  test2.ml
echo 'let y = Test1.y'   >> test2.ml
echo 'let () = print_endline (x^y)' >> test2.ml
output="$(./plugin_loader.exe test1.ml test2.ml 2>&1)"
if [ "$output" = 'Test1.xTest1.y' ]; then
    echo 'loaded ml and mli without warnings'
else
    echo "broken test: $output"
fi
echo

echo 'checking unused variables warnings 2'
rm -f test1.mli test2.mli
echo 'let x = "Test1.x"' >  test1.ml
echo 'let y = "Test1.y"' >> test1.ml
echo 'let x = Test1.x  ' >  test2.ml
echo 'let () = print_endline x' >> test2.ml
output="$(./plugin_loader.exe test1.ml test2.ml 2>&1)"
if grep -q 'Warning 32: unused value y' <<< "$output"; then
    echo warn error as expected
else
    echo "broken test: $output"
fi
echo

echo 'checking unused variables warnings 3'
rm -f test1.mli test2.mli
echo 'let x = "Test1.x"' >  test1.ml
echo 'let y = "Test1.y"' >> test1.ml
echo 'val x : string'    >  test1.mli
echo 'val y : string'    >> test1.mli
echo 'let x = Test1.x  ' >  test2.ml
echo 'let () = print_endline x' >> test2.ml
output="$(./plugin_loader.exe test1.ml test2.ml 2>&1)"
if [ "$output" = 'Test1.x' ]; then
    echo 'loaded ml and mli without warnings'
else
    echo "broken test: $output"
fi
echo

echo 'checking unused variables warnings 4'
rm -f test1.mli test2.mli
echo 'let x = "Test1.x"' >  test1.ml
echo 'let y = "Test1.y"' >> test1.ml
echo 'val x : string'    >  test1.mli
echo 'val y : string'    >> test1.mli
echo 'let x = Test1.x  ' >  test2.ml
echo 'let () = print_endline x' >> test2.ml
output="$(./plugin_loader.exe --warnings-in-utils test1.ml test2.ml 2>&1)"
if grep -q 'Warning 32: unused value y' <<< "$output"; then
    echo warn error as expected
else
    echo "broken test: $output"
fi
echo

echo 'checking unused variables warnings 5'
rm -f test1.mli
echo 'let x = "x"' >  test1.ml
echo 'let y = "y"' >> test1.ml
echo 'let () = print_endline y' >> test1.ml
output="$(./plugin_loader.exe test1.ml 2>&1)"
if grep -q 'Warning 32: unused value x' <<< "$output"; then
    echo warn error as expected
else
    echo "broken test: $output"
fi
echo

echo 'checking unused variables warnings 6'
rm -f test1.mli
echo 'let x = "x"' >  test1.ml
echo 'let y = "y"' >> test1.ml
echo 'let () = print_endline y' >> test1.ml
echo 'val x : string'    >  test1.mli
echo 'val y : string'    >> test1.mli
output="$(./plugin_loader.exe test1.ml 2>&1)"
if [ "$output" = 'y' ]; then
    echo 'loaded ml and mli without warnings'
else
    echo "broken test: $output"
fi
echo

echo 'checking unused variables warnings 7'
rm -f test1.mli
echo 'let x = "x"' >  test1.ml
echo 'let y = "y"' >> test1.ml
echo 'let () = print_endline y' >> test1.ml
echo 'val x : string'    >  test1.mli
echo 'val y : string'    >> test1.mli
output="$(./plugin_loader.exe --warnings-in-utils test1.ml 2>&1)"
if grep -q 'Warning 32: unused value y' <<< "$output"; then
    echo warn error as expected
else
    echo "broken test: $output"
fi
echo

echo 'checking run_plugin_toplevel parameter'
rm -f test.mli
rm -f test.ml
echo 'let () = Core.Std.Caml.Printf.printf "%b\n%!" (Async.Std.Thread_safe.am_holding_async_lock ())' > test.ml
output="$(./plugin_loader.exe test.ml 2>&1)"
if [ "$output" = 'true' ]; then
    echo 'loaded ml in async by default'
else
    echo "broken test: $output"
fi
output="$(./plugin_loader.exe --toplevel-outside-of-async test.ml 2>&1)"
if [ "$output" = 'false' ]; then
    echo 'loaded ml outside of async if requested'
else
    echo "broken test: $output"
fi
echo


# TODO
# echo 'check what happens on ocaml version change'
# echo 'check what happens on build info change'
# have a test that loads a lot of files (in parallel, even)
# and see if something leaks or blows up

